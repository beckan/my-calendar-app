{"version":3,"sources":["utils/getDatesInWeek.ts","components/CalendarEvent/CalendarEvent.tsx","components/ScreenReaderText/ScreenReaderText.tsx","components/CalendarDay/CalendarDay.tsx","components/CalendarBody/CalendarBody.tsx","utils/getFirstDateOfWeek.ts","components/Calendar/Calendar.tsx","App.tsx","index.tsx"],"names":["getDatesInWeek","startDate","dates","i","dayjs","isDayjs","push","add","CalendarEvent","title","className","ScreenReaderText","text","CalendarDay","date","events","classNames","isSunday","weekday","isToday","isSame","join","format","map","event","index","length","extend","weekOfYear","advancedFormat","CalendarBody","forwardRef","ref","isLoading","useState","setDates","useEffect","calendarDayList","dayEvents","tabIndex","weekDay","getFirstDateOfWeek","currentDate","Calendar","setStartDate","setEvents","setIsLoading","calendarBodyElmRef","useRef","a","axios","get","response","data","console","error","current","focus","aria-label","onClick","prevMonday","subtract","nextMonday","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67053116.chunk.js","sourcesContent":["import dayjs from \"dayjs\";\n\nconst getDatesInWeek = (startDate: dayjs.ConfigType) => {\n    const dates: dayjs.ConfigType[] = [];\n\n    for (let i = 0; i < 7; i++) {\n        if (dayjs.isDayjs(startDate)) {\n            dates.push(startDate.add(i, 'day'));\n        }\n    }\n    return dates;\n}\n\nexport default getDatesInWeek;","import React from 'react';\nimport './CalendarEvent.css';\n\ntype CalendarEventProps = {\n    title: string\n};\n\nconst CalendarEvent = ({title}: CalendarEventProps) => {\n    return (\n        <div className=\"c-calendar-event\">\n            {title}\n        </div>\n    );\n}\n\nexport default CalendarEvent;","import React from 'react';\nimport './ScreenReaderText.css';\n\ntype ScreenReaderTextProps = {\n    text: string\n};\n\nconst ScreenReaderText = ({text}: ScreenReaderTextProps) => {\n    return (\n        <div className=\"screen-reader-text\">\n            {text}\n        </div>\n    );\n}\n\nexport default ScreenReaderText;","import React from 'react';\nimport './CalendarDay.css';\nimport dayjs from \"dayjs\";\nimport CalendarEvent from \"../CalendarEvent/CalendarEvent\";\nimport ScreenReaderText from \"../ScreenReaderText/ScreenReaderText\";\n\ntype CalendarDayProps = {\n    date: any,\n    events: [any]\n};\n\nconst CalendarDay = ({date, events}: CalendarDayProps) => {\n    const classNames = ['c-calendar-day'];\n    const isSunday = date.weekday() === 0;\n    const isToday = date.isSame(dayjs(), 'date');\n\n    if (isSunday) {\n        classNames.push('c-calendar-day--is-sunday');\n    }\n\n    if (isToday) {\n        classNames.push('c-calendar-day--is-today');\n    }\n\n    return (\n        <div className={classNames.join(' ')}>\n            <div className=\"c-calendar-day__head\">{date.format('ddd DD')}</div>\n            <div className=\"c-calendar-day__body\">\n                {events.map((event, index) => <CalendarEvent key={index} {...event}/>)}\n                {!events.length && <ScreenReaderText text=\"No events\"/>}\n            </div>\n        </div>\n    );\n}\n\nexport default CalendarDay;","import React, {forwardRef, useEffect, useState} from 'react';\nimport './CalendarBody.css';\nimport getDatesInWeek from \"../../utils/getDatesInWeek\";\nimport CalendarDay from \"../CalendarDay/CalendarDay\";\nimport ScreenReaderText from \"../ScreenReaderText/ScreenReaderText\";\nimport dayjs from \"dayjs\";\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\n\ndayjs.extend(weekOfYear);\ndayjs.extend(advancedFormat);\n\ntype CalendarBodyProps = {\n    startDate: dayjs.ConfigType,\n    isLoading: boolean,\n    events: any\n};\n\nconst CalendarBody = forwardRef<HTMLDivElement, CalendarBodyProps>(({startDate, isLoading, events}, ref) => {\n    const [dates, setDates] = useState<dayjs.ConfigType[]>([]);\n\n    useEffect(() => {\n        setDates(getDatesInWeek(startDate));\n    }, [startDate]);\n\n    const classNames = ['c-calendar-body'];\n\n    if (isLoading) {\n        //TODO: We need better loading experience\n        classNames.push('c-calendar-body--is-loading');\n    }\n\n    const calendarDayList = dates.map((date, index) => {\n        let dayEvents = [];\n\n        if (dayjs.isDayjs(date)) {\n            dayEvents = events[date.format('YYYY-MM-DD')] || [];\n        }\n\n        return <CalendarDay date={date} key={index} events={dayEvents}/>;\n    });\n\n    return (\n        <>\n            <div className={classNames.join(' ')} tabIndex={-1} ref={ref}>\n                <ScreenReaderText text={dayjs.isDayjs(startDate) ? startDate.format('[Viewing week ] w [of] YYYY') : ''}/>\n                {dates && calendarDayList}\n            </div>\n        </>\n    );\n});\n\nexport default CalendarBody;","import dayjs from \"dayjs\";\nimport weekDay from \"dayjs/plugin/weekday\";\n\ndayjs.extend(weekDay);\n\nconst getFirstDateOfWeek = (date: dayjs.ConfigType) => {\n    return dayjs(date).weekday(1);\n}\n\nexport default getFirstDateOfWeek;","import React, {useEffect, useRef, useState} from 'react';\nimport './Calendar.css';\nimport CalendarBody from \"../CalendarBody/CalendarBody\";\nimport getFirstDateOfWeek from \"../../utils/getFirstDateOfWeek\";\nimport axios from 'axios';\nimport ScreenReaderText from \"../ScreenReaderText/ScreenReaderText\";\nimport dayjs from 'dayjs';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\n\ndayjs.extend(weekOfYear);\ndayjs.extend(advancedFormat);\n\nconst currentDate = dayjs();\n\ntype CalendarProps = {\n    title: string\n};\n\nconst Calendar = ({title}: CalendarProps) => {\n    const [startDate, setStartDate] = useState<dayjs.ConfigType>(getFirstDateOfWeek(currentDate));\n    const [events, setEvents] = useState<object>({});\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    const calendarBodyElmRef = useRef<HTMLDivElement>(null);\n\n    const goToToday = () => {\n        setStartDate(currentDate);\n    };\n\n    const goToPrevWeek = () => {\n        const prevMonday = dayjs(startDate).subtract(7, 'day');\n        setStartDate(getFirstDateOfWeek(prevMonday));\n    };\n\n    const goToNextWeek = () => {\n        const nextMonday = dayjs(startDate).add(7, 'day');\n        setStartDate(getFirstDateOfWeek(nextMonday));\n    };\n\n    // Load events from a mocked-api\n    useEffect(() => {\n        (async () => {\n            setEvents({});\n            setIsLoading(true);\n\n            try {\n                const response = await axios.get('/events.json');\n                setEvents(response.data);\n            } catch (error) {\n                // TODO: Here we need proper error handling\n                console.error(error);\n            } finally {\n                setIsLoading(false);\n            }\n\n            // Setting focus to calendarBody element for better accessibility experience\n            calendarBodyElmRef?.current?.focus();\n\n        })();\n    }, [startDate, calendarBodyElmRef]);\n\n    // TODO: Do this better maybe?\n    if (!dayjs.isDayjs(startDate)) {\n        return <div>Error: No start date is set...</div>;\n    }\n\n    return (\n        <div className=\"c-calendar\" aria-label={title}>\n            <div className=\"c-calendar__head\">\n                <div className=\"c-calendar__head-title\">{startDate.format('MMM YYYY [Week] w')}</div>\n                <div className=\"c-calendar__head-nav\">\n                    <button onClick={goToPrevWeek} className=\"c-calendar__head-nav-button\">\n                        &lt;\n                        <ScreenReaderText text=\"Go to previous week\"/>\n                    </button>\n                    <button onClick={goToToday} className=\"c-calendar__head-nav-button c-calendar__head-nav-button--today\">\n                        <ScreenReaderText text=\"Go to \"/> Today\n                    </button>\n                    <button onClick={goToNextWeek} className=\"c-calendar__head-nav-button\">\n                        &gt;\n                        <ScreenReaderText text=\"Go to next week\"/>\n                    </button>\n                </div>\n            </div>\n            <CalendarBody isLoading={isLoading} startDate={startDate} events={events} ref={calendarBodyElmRef} />\n        </div>\n    );\n};\n\nexport default Calendar;","import React from 'react';\nimport Calendar from \"./components/Calendar/Calendar\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Calendar title=\"My calendar\"/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n//TODO: We need TESTS!\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}